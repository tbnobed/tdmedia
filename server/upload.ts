import { Request } from 'express';
import multer, { FileFilterCallback } from 'multer';
import path from 'path';
import fs from 'fs';
import crypto from 'crypto';

// Create uploads directory if it doesn't exist
const uploadsDir = path.join(process.cwd(), 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
}

// Create separate folders for different media types
const docsDir = path.join(uploadsDir, 'documents');
const imagesDir = path.join(uploadsDir, 'images');
const videosDir = path.join(uploadsDir, 'videos');
const presentationsDir = path.join(uploadsDir, 'presentations');
const thumbnailsDir = path.join(uploadsDir, 'thumbnails');

// Ensure all subdirectories exist
[docsDir, imagesDir, videosDir, presentationsDir, thumbnailsDir].forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// File filter function to check valid file types
const fileFilter = (
  req: Request,
  file: Express.Multer.File,
  cb: FileFilterCallback
) => {
  const mediaType = req.body.type || req.query.type;
  
  // Get file extension
  const ext = path.extname(file.originalname).toLowerCase();
  
  // Define allowed extensions by media type
  const allowedExtensions: Record<string, string[]> = {
    'document': ['.pdf', '.doc', '.docx', '.txt', '.rtf'],
    'image': ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp'],
    'video': ['.mp4', '.webm', '.mov', '.avi', '.mkv'],
    'presentation': ['.ppt', '.pptx', '.key', '.odp']
  };
  
  // Check if we have a valid media type and extension
  if (mediaType && allowedExtensions[mediaType] && allowedExtensions[mediaType].includes(ext)) {
    return cb(null, true);
  }
  
  // Automatically detect type based on extension if not specified
  if (!mediaType) {
    if (allowedExtensions.document.includes(ext)) {
      req.body.type = 'document';
      return cb(null, true);
    } else if (allowedExtensions.image.includes(ext)) {
      req.body.type = 'image';
      return cb(null, true);
    } else if (allowedExtensions.video.includes(ext)) {
      req.body.type = 'video';
      return cb(null, true);
    } else if (allowedExtensions.presentation.includes(ext)) {
      req.body.type = 'presentation';
      return cb(null, true);
    }
  }
  
  // Reject file if it doesn't match any criteria
  cb(new Error('Invalid file type. Only documents, images, videos and presentations are allowed.'));
};

// Storage configuration for multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const mediaType = req.body.type || req.query.type;
    let uploadPath = uploadsDir;
    
    // Set destination based on media type
    switch (mediaType) {
      case 'document':
        uploadPath = docsDir;
        break;
      case 'image':
        uploadPath = imagesDir;
        break;
      case 'video':
        uploadPath = videosDir;
        break;
      case 'presentation':
        uploadPath = presentationsDir;
        break;
    }
    
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    // Generate a unique filename to prevent overwrites
    const uniqueSuffix = `${Date.now()}-${crypto.randomBytes(8).toString('hex')}`;
    const ext = path.extname(file.originalname);
    cb(null, `file-${uniqueSuffix}${ext}`);
  }
});

// Set up the multer upload middleware
export const upload = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: 50 * 1024 * 1024, // 50MB max file size
  }
});

// Helper function to get file type from filename
export function getFileTypeFromFilename(filename: string): string {
  const ext = path.extname(filename).toLowerCase();
  
  // Check extension against our allowed lists
  if (['.pdf', '.doc', '.docx', '.txt', '.rtf'].includes(ext)) {
    return 'document';
  } else if (['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp'].includes(ext)) {
    return 'image';
  } else if (['.mp4', '.webm', '.mov', '.avi', '.mkv'].includes(ext)) {
    return 'video';
  } else if (['.ppt', '.pptx', '.key', '.odp'].includes(ext)) {
    return 'presentation';
  }
  
  // Default fallback
  return 'document';
}

// Helper function to get file size in a readable format
export function getFormattedFileSize(filePath: string): string {
  const stats = fs.statSync(filePath);
  const fileSizeInBytes = stats.size;
  const fileSizeInKB = fileSizeInBytes / 1024;
  
  if (fileSizeInKB < 1024) {
    return `${Math.round(fileSizeInKB * 10) / 10} KB`;
  } else {
    const fileSizeInMB = fileSizeInKB / 1024;
    return `${Math.round(fileSizeInMB * 10) / 10} MB`;
  }
}

// Helper function to extract duration from video file (placeholder)
export function getVideoDuration(filePath: string): Promise<string> {
  // In a real implementation, you would use ffmpeg or a similar library
  // to get the actual duration of video files
  // For now, we'll just return a placeholder
  return Promise.resolve('00:00:00');
}

// Helper function to generate a thumbnail for a video
export async function generateThumbnail(videoId: number, videoFilePath: string): Promise<{ success: boolean, thumbnailPath?: string, error?: string }> {
  try {
    // Create a unique filename for the thumbnail
    const thumbnailFilename = `thumbnail-${videoId}-${Date.now()}.jpg`;
    const thumbnailPath = path.join(thumbnailsDir, thumbnailFilename);
    
    // Extract the base URL part from the video file path if it exists
    let baseUrl = '';
    if (videoFilePath.startsWith('http')) {
      // If it's an absolute URL, extract the domain part
      const url = new URL(videoFilePath);
      baseUrl = `${url.protocol}//${url.host}`;
    }
    
    console.log('Video file path for thumbnail generation:', videoFilePath);
    
    // Create a simple base64-encoded JPEG that represents a video thumbnail
    // This is a real JPEG with a play button, created with minimal dependencies
    const base64JpegData = `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`;
    
    // Create a Buffer from the base64 data
    const imageBuffer = Buffer.from(base64JpegData, 'base64');
    
    // Write the buffer to a file as binary data
    fs.writeFileSync(thumbnailPath, imageBuffer);
    
    // Calculate relative path for the database (from the app root)
    // Use a URL format that's compatible with the img src attribute and browser handling
    // Explicitly avoid leading slash to ensure client compatibility
    const relativeThumbnailPath = `uploads/thumbnails/${thumbnailFilename}`;
    console.log('Generated thumbnail at:', relativeThumbnailPath);
    
    return {
      success: true,
      thumbnailPath: relativeThumbnailPath
    };
  } catch (error) {
    console.error('Error generating thumbnail:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error generating thumbnail'
    };
  }
}